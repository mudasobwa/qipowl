{"name":"Typogrowl","tagline":"Markthrough","body":"![Typogrowl](/typogrowl/images/owl.png)\r\n\r\n_Typogrowl_ is the next generation markup environment. It’s not the\r\nmarkup language only, since it provides the very efficient and straightforward\r\nlibrary to produce custom markups. It′s not the markup library either,\r\nsince it comes with ready-to-use markdown-like markup and 2HTML converter.\r\n\r\nThe main idea of _Typogrowl_ is to yield the power of \r\n[DSL in Ruby](http://jroller.com/rolsen/entry/building_a_dsl_in_ruby).\r\nThe whole input text is treated neither more nor less than `DSL`. \r\nThat gives the user an ability to make virtually every term in input text\r\nthe _operating entity_.\r\n\r\n_Typogrowl_ utilizes UTF-8 heavily. The standard markup (here and further:\r\n_Typogrowl markup_, or _TGM_) lays on unicode characters instead of\r\nlegacy asterisks and underscores in markdown. It brings the better \r\nreadability to plain text before it’s processed with _Typogrowl_ and\r\nallows more readable `DSL` for processing. For instance, the input:\r\n\r\n    §3 Emphasized text\r\n\r\n    There are four standard modifiers for emphasizing text:\r\n    ▶ “≡” — bold\r\n    ▶ “≈” — italic\r\n    ▶ “↓” — small\r\n    ▶ “λ” — code\r\n\r\n    The formers are to surround the target text piece.\r\n    This text contains:\r\n    • ≡bold≡,\r\n    • ≈italics≈,\r\n    • ↓small↓ \r\n    • and even some λcodeλ.\r\n\r\nwill be processed as:\r\n\r\n```html\r\n<h3>Emphasized text</h3>\r\n<p class='dropcap'>There are four standard modifiers for emphasizing text:</p>\r\n<dl><dt>“≡”</dt><dd>bold</dd>\r\n<dt>“≈”</dt><dd>italic</dd>\r\n<dt>“↓”</dt><dd>small</dd>\r\n<dt>“λ”</dt><dd>code</dd></dl>\r\n<p class='dropcap'>The formers are to surround the target text piece.\r\nThis text contains:</p>\r\n<ul><li><strong>bold</strong>,</li>\r\n<li><em>italics</em>,</li>\r\n<li><small>small</small></li>\r\n<li>and even some <code>code</code>.</li></ul>\r\n```\r\n\r\nThe valuable subset of HTML5 is implemented directly, plus the user may\r\neventually extend the list of understandable tags.\r\n\r\nThe markup-specific symbols, like “▶” and “•” in the previous example\r\nmay be mapped to keyboard (see `typo` file within `data` directory of the \r\nproject.\r\n\r\n### Internals\r\n\r\n_Typogrowl_ markup implementation consists of two parts: markup definition\r\n(kinda `yaml` file) and markup processor. The latter derives from base\r\nprocessor implementation `Typogrowl::Bowler`.\r\n\r\n#### Markup definition\r\n\r\n_Typogrowl_ understands six types of ‘operators’:\r\n\r\n* flush\r\n* block\r\n* magnet\r\n* inplace\r\n* linewide\r\n* custom\r\n\r\n##### :flush\r\n\r\nThe operators in this group are executed immediately and do not break\r\nthe control flow. Technically, they are simply being substituted with \r\ntheir representation.\r\n\r\n    :flush\r\n      :⏎ : :br\r\n\r\nmeans that “⏎” anywhere in text will be substituted with “&lt;br&gt;”\r\n\r\n##### :block\r\n\r\nThis group contains operators, which are driving the blocks. Such a block\r\nshould start with the operator and ends with it. Operator may receive an\r\nadditional parameter, located on the same string as the opening operator.\r\n\r\n    :block\r\n      :Λ : :pre\r\n\r\nmeans that the following block:\r\n\r\n    Λ ruby\r\n      @mapping[:block].each { |tag, htmltag|\r\n        break if tag < :inplace\r\n      }\r\n    Λ\r\n\r\nis to be left intouch (except of html is escaped inside) \r\nand surrounded with `pre` tags:\r\n\r\n    <pre class='ruby'>\r\n      @mapping[:block].each { |tag, htmltag|\r\n        break if tag &lt; :inplace\r\n      }\r\n    </pre>\r\n\r\nThis operator is the only one which preserves the line breaks.\r\n\r\n##### :magnet\r\n\r\nOperates on the following text piece until the space. E.g.\r\n\r\n    :magnet\r\n      :☎ : :span†phone\r\n\r\nwill produce\r\n\r\n    <span class='phone'>☎ +1(987)5554321</span>\r\n\r\nfor the markup:\r\n\r\n    ☎ +1(987)5554321\r\n\r\n##### :inplace\r\n\r\nActs mostly like `:block` but inside one text block (text blocks are\r\nlikely paragraphs, delimited with double carriage returns.) Requires\r\nclosing element.\r\n\r\n    :inplace\r\n      :≡ : :strong\r\n\r\nwill convert\r\n\r\n    That is ≡bold≡ text.\r\n\r\ninto\r\n\r\n    That is <strong>bold</strong> text.\r\n\r\n##### :linewide\r\n\r\nThose are not require closings, since they are operated on the _rest_ of\r\nthe text. Support nesting by prepending tags with _non-breakable space_:\r\n\r\n    :linewide\r\n      :• : li\r\n\r\nThe following syntax \r\n\r\n    • Line item 1\r\n     • Nested li 1\r\n     • Nested li 2\r\n    • Line item 2\r\n\r\nwill produce:\r\n\r\n    <ul><li>Line item 1</li>\r\n    <ul><li>Nested li 1</li>\r\n    <li>Nested li 2</li></ul>\r\n    <li>Line item 2</li></ul>\r\n\r\n##### :custom\r\n\r\nCustom is not yet fully powerful mechanism to make substitutions inplace\r\nfor generic words. Please use on your own risk.\r\n\r\n#### Extending\r\n\r\nExtending _Typogrowl_ is as easy as writing a couple of strings in YAML format.\r\nLet’s take a look at additional rules file for markdown support:\r\n\r\n```yaml\r\n:synsugar :\r\n  # Code blocks, 4+ spaces indent\r\n  '(?x-mi:(\\R)((?:(?:\\R)+(?:\\s{4,}|\\t).*)+\\R)(?=\\R))' : \"\\\\1\\nΛ auto\\\\2Λ\\n\"\r\n  # Pictures\r\n  '!\\[(.*?)\\]\\((.*?)\\)' :  '⚓\\2 \\1⚓'\r\n  # Links\r\n  '\\[(.*?)\\]\\((.*?)\\)' :  '⚓\\2 \\1⚓'\r\n  # Blockquotes\r\n  '^\\s*>' : '〉'\r\n  '^\\s*>\\s*>' : '〉 〉'\r\n  '^\\s*\\*\\s*\\*' : '〉 •'\r\n  '^\\s+\\*' : '• •'\r\n\r\n\r\n:inplace : \r\n  :'__' : :strong\r\n  :'**' : :strong\r\n  :'_' : :em\r\n  :'*' : :em\r\n  :'`' : :code\r\n```\r\n\r\nBold, italic, code, images, links, blockquotes (including nesteds) are now \r\nsupported by _Typogrowl_. Let any one of you who is not delighted with, \r\nbe the first to throw a stone at me.\r\n\r\nNeed custom support for `github`-flavored markdown _strikethrough_? Oneliner\r\ninside an `:inplace` section of custom rules came on scene:\r\n\r\n```yaml\r\n  :'~~' :strike\r\n```\r\n\r\n##### Sophisticated extending\r\n\r\nWhether one needs more sophisticated rules, she is to write her own \r\ndescendant of `Bowler` class, implementing DSL herself. E.g. `Html`\r\nmarkup uses the following DSL for handling video links to YouTube:\r\n\r\n```ruby\r\n # Handler for Youtube video\r\n # @param [Array] args the words, gained since last call to {#harvest}\r\n # @return [Nil] nil\r\n def ✇ *args\r\n   id, *rest = args.flatten\r\n   harvest nil, orphan(rest.join(SEPARATOR)) unless rest.vacant?\r\n   harvest __callee__, \"<iframe width='560' height='315' \r\n           src='http://www.youtube.com/embed/#{id}' \r\n           frameborder='0' allowfullscreen></iframe>\"\r\n end\r\n```\r\n\r\nHere we harvest the previously gained words (`rest`) and transform copy-pasted\r\nlink to video into embedded frame with video content as by YouTube.\r\n\r\n### Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'typogrowl'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install typogrowl\r\n\r\n### Usage\r\n\r\n```ruby\r\nrequire 'typogrowl'\r\n…\r\ntg =  Typogrowl::Html.new \r\nputs tg.parse_and_roll(text)\r\n```\r\n\r\nor even simplier\r\n\r\n```ruby\r\nrequire 'typogrowl'\r\n…\r\ntg =  Typogrowl.tg_md__html # typogrowl markup _and_ markdown\r\n\r\nputs tg.parse_and_roll(text)\r\n```\r\n\r\n### Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}